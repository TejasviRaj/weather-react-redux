{"version":3,"sources":["Helpers/toLocalDateString.ts","Helpers/getDay.ts","Helpers/getFormattedFullDate.ts","Components/WeatherCard/SummaryCard/LocationDateInfo/LocationDateInfo.tsx","Helpers/capitalizeFirstLetter.ts","Components/WeatherCard/SummaryCard/WeatherInfo/WeatherInfo.tsx","Components/WeatherCard/SummaryCard/SummaryCard.tsx","Components/WeatherCard/DetailCard/DetailInfo/DetailInfo.tsx","Components/WeatherCard/DetailCard/ForecastInfo/ForecastInfo.tsx","Components/WeatherCard/DetailCard/DetailCard.tsx","Components/WeatherCard/WeatherCard.tsx","Actions/Location/actionCreatorsLocation.ts","Actions/Location/ActionTypes.ts","Components/SearchBar/SearchBar.tsx","Components/App/App.tsx","Components/App/config.ts","Actions/Weather/actionCreatorsWeather.ts","Actions/Weather/ActionTypes.ts","serviceWorker.js","Store/initialState.ts","Reducers/weatherReducer.ts","Reducers/locationReducer.ts","Reducers/rootReducer.ts","Saga/Weather/config.ts","Saga/Weather/fetchWeather.ts","Saga/Weather/weatherSaga.ts","Saga/Location/config.ts","Saga/Location/fetchLocation.ts","Saga/Location/locationSaga.ts","Saga/rootSaga.ts","Store/store.ts","index.js"],"names":["toLocalDateString","epoch","date","Date","setUTCSeconds","dayOfWeek","getDay","months","getFormattedFullDate","getDate","getMonth","getFullYear","LocationDateInfo","dt","useSelector","state","weather","daily","location","name","className","data-feather","capitalizeFirstLetter","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","WeatherInfo","temp","day","weatherDescription","description","SummaryCard","DetailInfo","pressure","humidity","windSpeed","wind_speed","detailInfoArray","title","value","map","detailInfo","ForecastInfo","forecastInfoArray","slice","forecast","index","src","icon","alt","DetailCard","WeatherCard","fetchLocation","city","type","fetchLocationSucceeded","SearchBar","props","console","log","onSubmit","handleSubmit","placeholder","searchText","onChange","e","event","setSearchText","target","App","dispatch","useDispatch","useState","useEffect","lat","long","lng","preventDefault","Boolean","window","hostname","match","initialState","isLoading","errorMessage","weatherReducer","action","payload","locationReducer","rootReducer","combineReducers","EXCLUDE","fetchWeather","axios","get","fetchWeatherWatcher","fetchWeatherWorker","takeLatest","put","call","response","data","fetchLocationWatcher","fetchLocationWorker","results","geometry","formatted","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","exact","path","process","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10cd3c95.chunk.js","sourcesContent":["const toLocalDateString = (epoch: number): Date => {\nvar date: Date = new Date(0);\ndate.setUTCSeconds(epoch);\nreturn date\n}\n\nexport default toLocalDateString;","import toLocalDateString from './toLocalDateString';\n\nconst dayOfWeek: string[] = [\"Sunday\", \"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nconst getDay = (epoch: number): string => {\n    const date: Date = toLocalDateString(epoch);\n    let formattedDay: string = dayOfWeek[date.getDay()];\n    return formattedDay;\n}\n\nexport default getDay;","import toLocalDateString from './toLocalDateString';\n\nconst months: string[] = [\"JAN\", \"FEB\", \"MAR\",\"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n\nconst getFormattedFullDate = (epoch: number): string => {\n    const date: Date = toLocalDateString(epoch);\n    let formattedDate: string = date.getDate() + \" \" + months[date.getMonth()] + \" \" + date.getFullYear()\n\n    return formattedDate\n}\nexport default getFormattedFullDate;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../Reducers/rootReducer';\nimport getDay from '../../../../Helpers/getDay';\nimport getFormattedFullDate from '../../../../Helpers/getFormattedFullDate';\nimport './LocationDateInfo.css'\n\nconst LocationDateInfo = () => {\n    const dt: number = useSelector((state: RootState) => state && state.weather && state.weather.daily && state?.weather?.daily[1].dt) || 0;\n    const location: string | null = useSelector((state: RootState) => state.location.name)\n    return (\n        <div className=\"locDate-container\">\n            <h2 className=\"weekDay\">{getDay(dt)}</h2>\n            <span className=\"full-date\">{getFormattedFullDate(dt)}</span>\n            <i className=\"location-icon\" data-feather=\"map-pin\"></i>\n            <span className=\"location\"></span>\n                       {location}\n        </div>\n    );\n}\n\nexport default LocationDateInfo;","const capitalizeFirstLetter = (str: string): string => {\n    var splitStr = str.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {      \n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \n    }\n    return splitStr.join(' ');\n}\n\nexport default capitalizeFirstLetter;","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../Reducers/rootReducer';\nimport capitalizeFirstLetter from '../../../../Helpers/capitalizeFirstLetter';\nimport './WeatherInfo.css';\n\nconst WeatherInfo = () => {\n    const temp: number | null = useSelector((state: RootState) => state.weather.daily && state.weather.daily[1].temp.day);\n    const weatherDescription: string = useSelector((state: RootState) => state.weather.daily && state.weather.daily[1].weather[0].description) ?? '';\n\n    return (\n        <div className=\"weather-container\">\n        <i className=\"weather-icon\" data-feather=\"sun\"></i>\n    <h1 className=\"temperature\">{temp}°C</h1>\n        <h3 className=\"description\">{capitalizeFirstLetter(weatherDescription)}</h3>\n    </div> \n    );\n}\n\nexport default WeatherInfo;","import React from 'react';\nimport LocationDateInfo from './LocationDateInfo/LocationDateInfo';\nimport WeatherInfo from './WeatherInfo/WeatherInfo';\nimport './SummaryCard.css';\n\nconst SummaryCard = () => {\n    return (\n        <div className=\"summary-card\">\n            <div className=\"gradient-background\"></div>\n            <LocationDateInfo />\n            <WeatherInfo />\n        </div>\n    )\n}\n\nexport default SummaryCard;","//Author-Tejasvi Raj Pant\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../Reducers/rootReducer';\nimport './DetailInfo.css'\n\n\n\nconst DetailInfo = () => {\n    const pressure = useSelector((state: RootState) => state.weather.daily && state.weather.daily[1].pressure);\n    const humidity = useSelector((state: RootState) => state.weather.daily && state.weather.daily[1].humidity);\n    const windSpeed = useSelector((state: RootState) => state.weather.daily && state.weather.daily[1].wind_speed);\n\n\n    const detailInfoArray = [\n        {\n            title: 'PRESSURE',\n            value: `${pressure} hPa`\n        },\n        {\n            title: 'HUMIDITY',\n            value: `${humidity} %`\n        },\n        {\n            title: 'WIND SPEED',\n            value: `${windSpeed} meter/sec`\n        },\n    ]\n\n    return (\n        <div className=\"detail-info\">\n            {\n                detailInfoArray.map(detailInfo => (\n                    <div>\n                        <span className=\"title\">{detailInfo.title}</span>\n                        <span className=\"value\">{detailInfo.value}</span>\n                        <div className=\"clear\"></div>\n                    </div>\n                ))\n            }\n\n        </div>\n    )\n}\n\nexport default DetailInfo;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../Reducers/rootReducer';\nimport IDaily from '../../../../Models/IDaily';\nimport getFormattedFullDate from '../../../../Helpers/getFormattedFullDate';\nimport './ForecastInfo.css';\n\nconst ForecastInfo = () => {\n    const forecastInfoArray: IDaily[] | undefined = useSelector((state: RootState) => state.weather.daily?.slice(1,5));\n    return (\n        <div>\n        <ul className=\"forecast\">\n            {\n                forecastInfoArray && forecastInfoArray.map ((forecast, index) => (\n                    <li className= {index ? 'forecastItem' : 'forecastItem active'}>\n                    <img src= {`http://openweathermap.org/img/wn/${forecast.weather[0].icon}.png`} alt =\"\"/>\n                    <span className=\"day-name\">{getFormattedFullDate(forecast.dt) } </span>\n                    <span className=\"day-temp\">{forecast.temp.day}°C</span>\n                </li>\n                ))\n            }\n        </ul>\n    </div>\n    );\n}\n\nexport default ForecastInfo;","//Author-Tejasvi Raj Pant\n\nimport React from 'react';\nimport DetailInfo from './DetailInfo/DetailInfo';\nimport ForeCastInfo from './ForecastInfo/ForecastInfo';\nimport './DetailCard.css';\n\nconst DetailCard = () => {\n        return (\n            <div className=\"detail-card\">\n            <DetailInfo />\n            <ForeCastInfo />\n           \n        </div>\n        );\n}\n\nexport default DetailCard;","//Author-Tejasvi Raj Pant\n\nimport React from 'react';\nimport SummaryCard from './SummaryCard/SummaryCard'\nimport DetailCard from './DetailCard/DetailCard';\nimport './WeatherCard.css';\n\nconst WeatherCard = () => {\n    return (\n        <div className=\"main-container\">\n            <div className=\"card-container\">\n                <SummaryCard />\n                <DetailCard />              \n            </div>\n        </div>\n    );\n}\n\nexport default WeatherCard;","//Author-Tejasvi Raj Pant\n\nimport {\n\tFETCH_LOCATION,\n\tFETCH_LOCATION_REQUESTED,\n\tFETCH_LOCATION_SUCCEEDED,\n\tFETCH_LOCATION_FAIL,\n} from './ActionTypes';\n\nimport IFetchLocationSucceeded from './IFetchLocationSucceeded ';\nimport IFetchLocationFail from './IFetchLocationFail';\nimport IFetchLocationRequested from './IFetchLocationRequested';\nimport IFetchLocation from './IFetchLocation';\nimport ILocation from '../../Models/ILocation';\n\nexport const fetchLocation = (city: string): IFetchLocation => ({\n\ttype: FETCH_LOCATION,\n\tcity\n})\nexport const fetchLocationRequested = (): IFetchLocationRequested => ({ type: FETCH_LOCATION_REQUESTED })\n\nexport const fetchLocationFail = (errorMessage: string): IFetchLocationFail => ({\n\ttype: FETCH_LOCATION_FAIL,\n\terrorMessage\n})\nexport const fetchLocationSucceeded = (location: ILocation): IFetchLocationSucceeded => {\n\n\treturn ({\n\ttype: FETCH_LOCATION_SUCCEEDED,\n\tlocation: location\n})}\n","//Author-Tejasvi Raj Pant\n\n\nexport const FETCH_LOCATION = 'FETCH_LOCATION'\nexport type FETCH_LOCATION = typeof FETCH_LOCATION\n\nexport const FETCH_LOCATION_REQUESTED = 'FETCH_LOCATION_REQUESTED'\nexport type FETCH_LOCATION_REQUESTED = typeof FETCH_LOCATION_REQUESTED\n\nexport const FETCH_LOCATION_SUCCEEDED = 'FETCH_LOCATION_SUCCEEDED'\nexport type FETCH_LOCATION_SUCCEEDED = typeof FETCH_LOCATION_SUCCEEDED\n\nexport const FETCH_LOCATION_FAIL = 'FETCH_LOCATION_FAIL'\nexport type FETCH_LOCATION_FAIL = typeof FETCH_LOCATION_FAIL\n\n\n","import React, {ChangeEvent, SyntheticEvent} from 'react';\nimport './SearchBar.css'\n\ninterface PropTypes {\n    searchText: string,\n   setSearchText: (value: string | ((prevState: string) => string)) => void,\n   handleSubmit: (e:SyntheticEvent) => void\n\n}\n\nconst SearchBar = (props: PropTypes) => {\n    console.log(props);\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        props.setSearchText(event.target.value);\n    }\n    return (\n    <div className=\"container\">\n\t  <div className=\"row justify-content-center\">\n                        <div className=\"col-12 col-md-10 col-lg-8\">\n                            <form className=\"card card-sm\" onSubmit = {props.handleSubmit}>\n                                <div className=\"card-body row no-gutters align-items-center\">\n                                    <div className=\"col-auto\">\n                                        <i className=\"fas fa-search h4 text-body\"></i>\n                                    </div>\n                                    <div className=\"col\">\n                                        <input className=\"form-control form-control-lg form-control-borderless\" type=\"search\" placeholder=\"Search Location\" value = {props.searchText} onChange = {(e) => handleChange(e)}/>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <button className=\"btn btn-lg btn-dark\" type=\"submit\">Search</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n      </div>\n  </div>\n    );\n}\n\nexport default SearchBar;","//Author-Tejasvi Raj Pant\n\nimport React, { useEffect, useState, SyntheticEvent } from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchWeather } from '../../Actions/Weather/actionCreatorsWeather'\nimport { RootState } from '../../Reducers/rootReducer';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport { fetchLocation } from '../../Actions/Location/actionCreatorsLocation';\nimport SearchBar from '../SearchBar/SearchBar';\nimport {INITIAL_LOCATION} from './config';\n\nconst App = () => {\n  const state: RootState = useSelector((state: RootState) => state)\n  const {location} = state;\n  const dispatch = useDispatch()\n  const [searchText, setSearchText] = useState('');\n\n  useEffect(() => {\n    dispatch(fetchLocation(INITIAL_LOCATION));\n\n  }, [dispatch])\n\n  const handleSubmit = (e: SyntheticEvent) => {\n    e.preventDefault();\n    dispatch(fetchLocation(searchText));\n  };\n\n  useEffect(() => {\n      if (location && location.lat && location.lng) {\n        dispatch(fetchWeather(location.lat, location.lng));\n\n      }\n  }, [location, dispatch])\n\n  return (\n    <>\n      <SearchBar searchText = {searchText} setSearchText = {setSearchText} handleSubmit = {handleSubmit} />\n      <WeatherCard />\n    </>\n  )\n}\n\nexport default App;\n","export const INITIAL_LOCATION = 'Kathmandu';","//Author-Tejasvi Raj Pant\n\nimport {\n\tFETCH_WEATHER,\n\tFETCH_WEATHER_REQUESTED,\n\tFETCH_WEATHER_SUCCEEDED,\n\tFETCH_WEATHER_FAIL,\n} from './ActionTypes';\n\nimport IFetchWeatherSucceeded from './IFetchWeatherSucceeded';\nimport IFetchWeatherFail from './IFetchWeatherFail';\nimport IFetchWeatherRequested from './IFetchWeatherRequested';\nimport IFetchWeather from './IFetchWeather';\nimport IWeather from '../../Models/IWeather';\n\n\nexport const fetchWeather = (lat: number | null, long: number | null): IFetchWeather => ({\n\ttype: FETCH_WEATHER,\n\tlat,\n\tlong\n})\nexport const fetchWeatherRequested = (): IFetchWeatherRequested => ({ type: FETCH_WEATHER_REQUESTED })\n\nexport const fetchWeatherFail = (errorMessage: string): IFetchWeatherFail => ({\n\ttype: FETCH_WEATHER_FAIL,\n\terrorMessage\n})\nexport const fetchWeatherSucceeded = (payload: IWeather): IFetchWeatherSucceeded => {\n\treturn ({\n\ttype: FETCH_WEATHER_SUCCEEDED,\n\tpayload\n})}\n","//Author-Tejasvi Raj Pant\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER'\nexport type FETCH_WEATHER = typeof FETCH_WEATHER\n\nexport const FETCH_WEATHER_REQUESTED = 'FETCH_WEATHER_REQUESTED'\nexport type FETCH_WEATHER_REQUESTED = typeof FETCH_WEATHER_REQUESTED\n\nexport const FETCH_WEATHER_SUCCEEDED = 'FETCH_WEATHER_SUCCEEDED'\nexport type FETCH_WEATHER_SUCCEEDED = typeof FETCH_WEATHER_SUCCEEDED\n\nexport const FETCH_WEATHER_FAIL = 'FETCH_WEATHER_FAIL'\nexport type FETCH_WEATHER_FAIL = typeof FETCH_WEATHER_FAIL\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//Author-Tejasvi Raj Pant\n\nimport IWeather from '../Models/IWeather';\nimport ILocation from '../Models/ILocation';\n\nconst weather: IWeather = {\n\tisLoading: false,\t\n\tdaily: null,\n\terrorMessage: null,\n}\n\nconst location: ILocation = {\n\tlat: null,\n\tlng: null,\n\tname: null\n}\n\nconst initialState = {\n\tweather: weather,\n\tlocation: location\n}\n\nexport default initialState;","//Author-Tejasvi Raj Pant\n\nimport { FETCH_WEATHER_REQUESTED, FETCH_WEATHER_SUCCEEDED, FETCH_WEATHER_FAIL } from '../Actions/Weather/ActionTypes';\nimport IWeather from '../Models/IWeather';\nimport {IActionCreator} from '../Actions/IActionCreator';\nimport initialState from '../Store/initialState'\n\nconst weatherReducer = (state: IWeather = initialState.weather , action: IActionCreator): IWeather => {\n\n\tswitch (action.type) {\n\t\tcase FETCH_WEATHER_REQUESTED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true,\n\t\t\t\terrorMessage: null\n\t\t\t}\n\t\tcase FETCH_WEATHER_SUCCEEDED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdaily: action.payload.daily,\n\t\t\t\terrorMessage: null,\n\t\t\t\tisLoading: false,\n\t\t\t}\n\t\tcase FETCH_WEATHER_FAIL:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terrorMessage: action.errorMessage,\n\t\t\t\tisLoading: false,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\n\t}\n};\n\nexport default weatherReducer;\n\n\n","//Author-Tejasvi Raj Pant\n\nimport { FETCH_LOCATION_REQUESTED, FETCH_LOCATION_SUCCEEDED, FETCH_LOCATION_FAIL } from '../Actions/Location/ActionTypes';\nimport {IActionCreator} from '../Actions/IActionCreator';\nimport initialState from '../Store/initialState'\nimport ILocation from '../Models/ILocation';\n\n\n\nconst locationReducer = (state: ILocation = initialState.location, action: IActionCreator): ILocation => {\n\tswitch (action.type) {\n\t\tcase FETCH_LOCATION_REQUESTED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t\n\t\t\t}\n\t\tcase FETCH_LOCATION_SUCCEEDED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlat: action.location.lat,\n\t\t\t\tlng: action.location.lng,\n\t\t\t\tname: action.location.name\n\t\t\t\t\n\t\t\t}\n\t\tcase FETCH_LOCATION_FAIL:\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\n\t}\n};\n\nexport default locationReducer;\n\n\n","//Author-Tejasvi Raj Pant\n\nimport weatherReducer from './weatherReducer';\nimport locationReducer from './locationReducer'\nimport { combineReducers } from 'redux';\n\nconst rootReducer  = combineReducers({\n\tlocation: locationReducer,\n\tweather: weatherReducer,\n})\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer","//Author-Tejasvi Raj Pant\n\nexport const API_KEY = \"5067c8b178326959f4731b3b1953cfd2\";\nexport const ROOT_URL = `https://api.openweathermap.org/data/2.5/onecall`;\nexport const EXCLUDE = ['minutely' ,'hourly', 'current'];\nexport const UNIT = 'metric';","//Author-Tejasvi Raj Pant\n\nimport {API_KEY, ROOT_URL, EXCLUDE, UNIT} from './config';\n\nimport axios from 'axios';\n\nexport const fetchWeather = (lat: number | null, long: number | null) => {\n    return axios.get(`${ROOT_URL}?lat=${lat}&lon=${long}&units=${UNIT}&exclude=${EXCLUDE.join(',')}&appid=${API_KEY}`);\n}","//Author-Tejasvi Raj Pant\n\nimport { put, call, takeLatest } from 'redux-saga/effects'\nimport { fetchWeatherRequested, fetchWeatherSucceeded, fetchWeatherFail } from '../../Actions/Weather/actionCreatorsWeather'\nimport { FETCH_WEATHER } from '../../Actions/Weather/ActionTypes'\nimport IFetchWeather from '../../Actions/Weather/IFetchWeather';\nimport {fetchWeather} from './fetchWeather';\n\nexport function* fetchWeatherWatcher() {\n\tyield takeLatest(FETCH_WEATHER, fetchWeatherWorker)\n}\n\nfunction* fetchWeatherWorker(props: IFetchWeather) {\n\ttry {\n\t\tyield put(fetchWeatherRequested())\n\t\tconst response = yield call(fetchWeather, props.lat, props.long);\n\t\tyield put(fetchWeatherSucceeded(response.data))\n\t} catch (error) {\n\t\tyield put(fetchWeatherFail(\"Error\"))\n\t}\n}\n","//Author-Tejasvi Raj Pant\n\nexport const API_KEY = \"65fd69152e3445e09b3924c12d842b16\";\nexport const ROOT_URL = `https://api.opencagedata.com/geocode/v1/json`;\n","//Author-Tejasvi Raj Pant\n\nimport {API_KEY, ROOT_URL} from './config';\n\nimport axios from 'axios';\n\nexport const fetchLocation = (city: string) => {\n    return axios.get(`${ROOT_URL}?q=${city}&key=${API_KEY}`);\n}","//Author-Tejasvi Raj Pant\n\nimport { put, call, takeLatest } from 'redux-saga/effects'\nimport IFetchLocation from '../../Actions/Location/IFetchLocation';\nimport {fetchLocation} from './fetchLocation';\nimport { FETCH_LOCATION } from '../../Actions/Location/ActionTypes';\nimport { fetchLocationRequested, fetchLocationSucceeded, fetchLocationFail } from '../../Actions/Location/actionCreatorsLocation';\n\nexport function* fetchLocationWatcher() {\n\tyield takeLatest(FETCH_LOCATION, fetchLocationWorker)\n}\n\nfunction* fetchLocationWorker(props: IFetchLocation) {\n\ttry {\n\t\tyield put(fetchLocationRequested())\n\n\t\tconst response = yield call(fetchLocation, props.city);\n\t\tlet location = response.data.results[0].geometry;\n\t\tlocation.name = response.data.results[0].formatted\n\t\tyield put(fetchLocationSucceeded(location))\n\t} catch (error) {\n\t\tyield put(fetchLocationFail(\"Error\"))\n\t}\n}\n","//Author-Tejasvi Raj Pant\n\nimport { all } from 'redux-saga/effects';\nimport {fetchWeatherWatcher} from './Weather/weatherSaga';\nimport {fetchLocationWatcher} from './Location/locationSaga'\n\nexport function* rootSaga() {\n  yield all([\n    fetchWeatherWatcher(),\n    fetchLocationWatcher()\n  ]);\n}\n\nexport default rootSaga;","//Author-Tejasvi Raj Pant\n\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../Reducers/rootReducer';\nimport { rootSaga } from '../Saga/rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(rootSaga)\n\nexport default store\n","//Author-Tejasvi Raj Pant\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Store/store';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <BrowserRouter>\n    <Route exact path={process.env.PUBLIC_URL + \"/\"} component = {App}>\n\n    </Route>\n\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}